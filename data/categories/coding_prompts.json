[
    {
        "question_id": 121,
        "category": "coding",
        "turns": [
            "Entwickle ein Python Programm, dass alle Textdateien in einem Verzeichnis liest und die fünf Wörter mit der höchsten Häufigkeit zurückgibt.",
            "Kannst du es parallelisieren?"
        ],
        "reference": [
            "Es kann eine einfache Lösung wie ein Counter sein\nBeispielantwort:\n```\nimport os\nimport re\nfrom collections import Counter\ndef get_files_in_directory(directory):\n    return [os.path.join(directory, f) for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f)) and f.endswith('.txt')]\ndef read_file(file_path):\n    with open(file_path, 'r', encoding='utf-8') as file:\n        return file.read()\ndef count_words(text):\n    words = re.findall(r' w+', text.lower())\n    return Counter(words)\ndef main():\n    directory = input(\"Enter the directory path: \")\n    files = get_files_in_directory(directory)\n    word_counts = Counter()\n    for file in files:\n        text = read_file(file)\n        word_counts += count_words(text)\n    top_5_words = word_counts.most_common(5)\n    print(\"Top 5 words with the most number of occurrences:\")\n    for word, count in top_5_words:\n        print(f\"{word}: {count}\")\nif __name__ == \"__main__\":\n    main()\n```",
            "Du solltest genau überprüfen, ob die Parallelisierungslogik korrekt ist und gegebenenfalls eine schnellere Lösung erstellen.\n\nBeispielantwort:\n```\nimport os\nimport re\nfrom collections import Counter\nimport concurrent.futures\ndef get_files_in_directory(directory):\n    return [os.path.join(directory, f) for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f)) and f.endswith('.txt')]\ndef read_file(file_path):\n    with open(file_path, 'r', encoding='utf-8') as file:\n        return file.read()\ndef count_words(text):\n    words = re.findall(r'w+', text.lower())\n    return Counter(words)\ndef process_file(file):\n    text = read_file(file)\n    return count_words(text)\ndef main():\n    directory = input(\"Enter the directory path: \")\n    files = get_files_in_directory(directory)\n    word_counts = Counter()\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_word_counts = {executor.submit(process_file, file): file for file in files}\n        for future in concurrent.futures.as_completed(future_word_counts):\n            word_counts += future.result()\n    top_5_words = word_counts.most_common(5)\n    print(\"Top 5 Wörter mit der meisten Häufigkeit:\")\n    for word, count in top_5_words:\n        print(f\"{word}: {count}\")\nif __name__ == \"__main__\":\n    main()\n```"
        ]
    },
    {
        "question_id": 122,
        "category": "coding",
        "turns": [
            "Schreib ein C++ Programm um die nte Fibonacci Nummer herauszufinden mit Hilfe einer Rekursion.",
            "Wir definieren nun eine Sequenz von Nummern in der jede Nummer die Summe der drei fortlaufenden Nummern ist. Die ersten drei Nummern sind 0, -1, -1. Schreib ein Programm um die nte Nummer zu berechnen."
        ],
        "reference": [
            "Einfach\n\n```\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}\n```",
            "Sie sollten die Anfangsfälle für n < 3 sorgfältig prüfen\n\n```\nint find_nth_number(int n) {\n    std::vector<int> sequence = {0, -1, -1};\n    for (int i = 3; i <= n; ++i) {\n        int next_number = sequence[i - 1] + sequence[i - 2] + sequence[i - 3];\n        sequence.push_back(next_number);\n    }\n    return sequence[n];\n}\n```"
        ]
    },
    {
        "question_id": 123,
        "category": "coding",
        "turns": [
            "Schreibe eine einfache Website in HTML. Wenn ein Nutzer den Butten klickt, wird ein zufälliger Witz aus einer Liste von vier Witzen angezeigt",
            "Wie benutzt man CSS um die Farbe der Witze in rot anzuzeigen?"
        ],
        "reference": null
    },
    {
        "question_id": 124,
        "category": "coding",
        "turns": [
            "Hier ist eine Python-Funktion, um die Länge der längsten gemeinsamen Teilsequenz zweier Eingabezeichenfolgen zu ermitteln. Kannst du einen Fehler in dieser Funktion identifizieren?\n\n```\ndef longest_common_subsequence_length(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n```",
            "what about this one?\n\n```\ndef longest_common_subsequence(X , Y): \n    # Find lengths of two strings \n    m = len(X) \n    n = len(Y) \n  \n    # Create a table to store results of sub-problems \n    dp = [[None]*(n+1) for i in range(m+1)] \n  \n    # Fill dp[][] in bottom up manner \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if X[i-1] == Y[j-1]: \n                dp[i][j] = dp[i-1][j-1]+1\n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n  \n    return dp[m][n]\n```"
        ],
        "reference": [
            "Es ist kein Fehler in der Implementation",
            "Es ist ein Fehler in der Implementation für die Initialisierung des dp arrays. Du solltest lieber 0 statt None nutzen."
        ]
    },
    {
        "question_id": 125,
        "category": "coding",
        "turns": [
            "Schreibe eine Funktion, um den höchsten gemeinsamen Vorfahren (nicht LCA) zweier Knoten in einem Binärbaum zu finden.",
            "Was ist, wenn es sich nicht um einen Binärbaum handelt?"
        ],
        "reference": [
            "Sehr einfach. Die Funktion sollte nur die Wurzel des Baums zurückgeben",
            "Gleiche Antwort. Es ist immer noch die Wurzel des Baumes."
        ]
    },
    {
        "question_id": 126,
        "category": "coding",
        "turns": [
            "Implementiere eine Funktion, um den Median zweier sortierter Arrays unterschiedlicher Größe mit O(1) Raumkomplexität und O(n) Zeitkomplexität zu ermitteln.",
            "Gibt es eine Implementierung mit besserer Zeitkomplexität?"
        ],
        "reference": [
            "Überprüfe sorgfältig, ob die gegebene Lösung eine lineare Komplexität aufweist.\n\n```\ndef find_median(arr1, arr2):\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if (n1 + n2) == 0:\n        return None\n\n    i, j = 0, 0\n    last_1, last_2 = None, None\n\n    for k in range(1, (n1 + n2) // 2 + 2):\n        last_2 = last_1\n        if j == n2:\n            last_1 = arr1[i]\n            i += 1\n        elif i == n1:\n            last_1 = arr2[j]\n            j += 1\n        elif arr1[i] < arr2[j]:\n            last_1 = arr1[i]\n            i += 1\n        else:\n            last_1 = arr2[j]\n            j += 1\n        \n    if (n1 + n2) % 2 == 1:\n        return last_1\n    else:\n        return (last_1 + last_2) / 2\n```",
            "Es gibt eine binäre Suchlösung mit O(logn) Zeitkomplexität..\n\nSample answer:\n```\ndef findMedian(nums1, nums2):\n    total = len(nums1) + len(nums2)\n    if total % 2 == 1:\n        return findKth(nums1, nums2, total // 2 + 1)\n    else:\n        return (findKth(nums1, nums2, total // 2) + findKth(nums1, nums2, total // 2 + 1)) / 2.0\ndef findKth(nums1, nums2, k):\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    if not nums1:\n        return nums2[k-1]\n    if k == 1:\n        return min(nums1[0], nums2[0])\n    i = min(k // 2, len(nums1))\n    j = k - i\n    if nums1[i-1] <= nums2[j-1]:\n        return findKth(nums1[i:], nums2, j) \n    else:\n        return findKth(nums1, nums2[j:], i)\n```"
        ]
    },
    {
        "question_id": 127,
        "category": "coding",
        "turns": [
            "Schreibe eine Funktion, um mithilfe des Boyer-Moore-Abstimmungsalgorithmus das Mehrheitselement in einem bestimmten ganzzahligen Array zu finden.",
            "Wie wäre es, die beiden am häufigsten vorkommenden Elemente zu finden?"
        ],
        "reference": [
            "Überprüfe, ob sie den klassischen Algorithmus korrekt implementieren.\n\nBeispielantwort:\n```\ndef majority_element(arr):\n    count = 0\n    candidate = None\n    # Boyer-Moore Voting Algorithmus\n    for num in arr:\n        if count == 0:\n            candidate = num\n        count += (1 if num == candidate else -1)\n    # Überprüfe, ob der Kandidat tatsächlich das Mehrheitselement darstellt\n    if arr.count(candidate) > len(arr) // 2:\n        return candidate\n    else:\n        return None\n```",
            "Es gibt keine einfache Modifikation, die auf dem Boyer-Moore-Abstimmungsalgorithmus basiert. Die erwartete Antwort ist die Verwendung einer Hash-Tabelle.\n\n```\ndef topTwo(nums):\n    # Build a frequency map\n    frequency_map = {}\n    for num in nums:\n        if num in frequency_map:\n            frequency_map[num] += 1\n        else:\n            frequency_map[num] = 1\n\n    # Find the top two most occurring elements\n    most_frequent = sorted(frequency_map.items(), key=lambda x: x[1], reverse=True)[:2]\n\n    return [num for num, _ in most_frequent]\n```"
        ]
    },
    {
        "question_id": 128,
        "category": "coding",
        "turns": [
            "Ein Binärbaum ist voll, wenn alle seine Knoten entweder null oder zwei Kinder haben. Sei B_n die Anzahl der vollständigen Binärbäume mit n Eckpunkten. Implementiere eine Funktion, um B_n zu finden.",
            "Was wäre, wenn sich das Problem von einem Binärbaum zu einem Ternärbaum ändern würde?"
        ],
        "reference": [
            "Die erwartete Antwort ist die unten gezeigte dynamische Programmierung. Einige Chatbots antworten möglicherweise mit einer katalanischen Nummer.\nÜberprüfe die Groß-/Kleinschreibung, z. B. wenn n gerade ist -> return 0.\n\n```python\ndef full_binary_trees(n):\n    if n % 2 == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    dp = [0] * (n + 1)\n    dp[1] = 1\n\n    for i in range(3, n + 1, 2):\n        for j in range(1, i - 1, 2):\n            dp[i] += dp[j] * dp[i - j - 1]\n\n    return dp[n]\n```",
            "DP ist immer noch die erwartete Antwort. Die katalanische Zahl ist nicht korrekt. Überprüfen Sie die Übergangsgleichung sorgfältig.\n\n```python\ndef full_ternary_trees(n):\n    if n % 3 != 1:\n        return 0\n    if n == 1:\n        return 1\n\n    dp = [0] * (n + 1)\n    dp[1] = 1\n\n    for i in range(4, n + 1, 3):\n        for j in range(1, i - 1, 3):\n            for k in range(1, i - j - 1, 3):\n                dp[i] += dp[j] * dp[k] * dp[i - j - k - 1]\n\n    return dp[n]\n```"
        ]
    },
    {
        "question_id": 129,
        "category": "coding",
        "turns": [
            "Sie erhalten zwei sortierte Listen der Größe m und n. Implementieren Sie eine Funktion, um das k-kleinste Element in der Vereinigung der beiden Listen mit linearer Komplexität zu finden.",
            "Gibt es einen Algorithmus mit besserer Zeitkomplexität? Wenn ja, implementiere es."
        ],
        "reference": [
            "Unkompliziert, aber vorsichtig mit Randfällen.\nBeispielantwort:\n```\ndef kth_smallest_element(list1, list2, k):\n    m, n = len(list1), len(list2)\n    i, j = 0, 0\n    while i < m and j < n:\n        if list1[i] < list2[j]:\n            k -= 1\n            if k == 0:\n                return list1[i]\n            i += 1\n        else:\n            k -= 1\n            if k == 0:\n                return list2[j]\n            j += 1\n    while i < m:\n        k -= 1\n        if k == 0:\n            return list1[i]\n        i += 1\n    while j < n:\n        k -= 1\n        if k == 0:\n            return list2[j]\n        j += 1\n    return None\n```",
            "Ja, eine modifizierte Binärsuche hat O(log k) Zeitkomplexität.\nBeispielantwort:\n```\ndef find_kth_element_helper(list1, list2, k):\n    if len(list1) > len(list2):\n        return find_kth_element_helper(list2, list1, k)\n    if not list1:\n        return list2[k - 1]\n    if k == 1:\n        return min(list1[0], list2[0])\n    i = min(len(list1), k // 2)\n    j = k - i\n    if list1[i - 1] < list2[j - 1]:\n        return find_kth_element_helper(list1[i:], list2, k - i)\n    else:\n        return find_kth_element_helper(list1, list2[j:], k - j)\ndef kth_smallest_element(list1, list2, k):\n    return find_kth_element_helper(list1, list2, k)\n```"
        ]
    },
    {
        "question_id": 130,
        "category": "coding",
        "turns": [
            "Implementiere ein Programm, um die gemeinsamen Elemente in zwei Arrays zu finden, ohne zusätzliche Datenstrukturen zu verwenden.",
            "Jetzt ist die Einschränkung, keine zusätzliche Datenstruktur zu verwenden, beseitigt. Implementiere eine mit der besten Zeitkomplexität."
        ],
        "reference": [
            "O(n^2) oder O(nlogn) wird erwartet Das Folgende ist eine O(n^2)-Lösung. Sie können sie auch zuerst sortieren und zwei Zeiger verwenden.\n\n```\ndef find_common_elements(arr1, arr2):\n    common_elements = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                # Check if the element is already in the common_elements list\n                if arr1[i] not in common_elements:\n                    common_elements.append(arr1[i])\n    return common_elements\n```",
            "Verwenden Sie einfach eine Hash-Tabelle (Set oder Dict), um eine O(n)-Zeitkomplexität zu erreichen.\n\n```\ndef find_common_elements(arr1, arr2):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    common_elements = set1.intersection(set2)\n    return list(common_elements)\n```"
        ]
    }
]